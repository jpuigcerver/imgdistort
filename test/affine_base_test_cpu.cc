#include "affine_base_test_cpu.h"

#include <cstring>  // IWYU pragma: keep

#include <glog/logging.h>

#include "test_image.h"

namespace imgdistort {
namespace testing {
namespace cpu {

static const TestImage original_image = {
  32, 16, 4,
  "\372\2\374\0\362\12\354\0\352\22\334\5\342\32\314\23\332\"\273!\322*\253"
  "-\3122\233;\302:\213G\272B{S\262Jl^\252R\\h\242ZKq\232b<y\222j,\177\212r"
  "\33\204\202z\14\206z\202\3\207r\212\24\205j\222$\202b\2324|Z\242DuR\252T"
  "mJ\262dcB\272sY:\302\204M2\312\224A*\322\2444\"\332\263(\32\342\303\32\22"
  "\352\323\14\12\362\343\0\2\372\363\0\372\2\374\0\362\12\353\0\352\22\333"
  "\15\342\32\313\33\332\"\274)\322*\2536\3122\233D\302:\213R\272B|^\262Jkj"
  "\252R[u\242ZL\177\232b<\207\222j+\217\212r\34\224\202z\14\227z\202\3\227"
  "r\212\24\225j\222$\221b\2324\213Z\242C\203R\252TzJ\262dpB\272sd:\302\203"
  "X2\312\224K*\322\244=\"\332\2630\32\342\303\"\22\352\323\24\12\362\343\5"
  "\2\372\363\0\372\2\373\0\362\12\353\4\352\22\333\22\342\32\313\"\332\"\274"
  "0\322*\253?\3122\233M\302:\214Z\272B|g\262Jlt\252R[\200\242ZL\213\232b;\225"
  "\222j,\235\212r\34\243\202z\14\246z\202\3\247r\212\24\245j\222$\240b\232"
  "3\232Z\242D\220R\252T\206J\262dzB\272tn:\302\204a2\312\223S*\322\244F\"\332"
  "\2648\32\342\304)\22\352\323\32\12\362\343\13\2\372\364\0\372\2\374\0\362"
  "\12\353\11\352\22\333\31\342\32\314(\332\"\2746\322*\254E\3122\234S\302:"
      "\214b\272B{p\262Jl}\252R[\212\242ZK\227\232b;\242\222j,\253\212r\34\262\202"
      "z\14\266z\202\3\267r\212\24\265j\222$\257b\2324\247Z\242C\234R\252S\220J"
      "\262d\204B\272sw:\302\204i2\312\223[*\322\243L\"\332\263>\32\342\303/\22"
      "\352\323\40\12\362\343\21\2\372\364\2\372\2\374\0\362\12\353\16\352\22\333"
      "\35\342\32\313,\332\"\273<\322*\254K\3122\234Z\302:\213i\272B|w\262Jl\206"
      "\252R\\\224\242ZL\241\232b<\255\222j,\270\212r\34\301\202z\14\306z\202\3"
      "\306r\212\24\304j\222$\275b\2324\263Z\242D\247R\252T\233J\262c\214B\272t"
      "\177:\302\203q2\312\223b*\322\244S\"\332\263C\32\342\3044\22\352\323%\12"
      "\362\344\25\2\372\363\5\372\2\374\2\362\12\353\20\352\22\333\40\342\32\313"
      "0\332\"\273@\322*\253O\3122\233_\302:\214n\272B|}\262Jk\214\252R\\\233\242"
      "ZK\252\232b;\267\222j,\304\212r\34\316\202z\14\325z\202\3\327r\212\24\322"
      "j\222$\311b\2324\276Z\242D\260R\252T\242J\262d\224B\272t\205:\302\204v2\312"
      "\223g*\322\243W\"\332\263G\32\342\3038\22\352\323(\12\362\343\31\2\372\364"
      "\10\372\2\374\3\362\12\353\23\352\22\333#\342\32\3133\332\"\273B\322*\253"
      "R\3122\234a\302:\213r\272B|\201\262Jk\221\252R\\\240\242ZL\260\232b;\276"
      "\222j,\315\212r\34\333\202z\14\345z\202\3\347r\212\24\340j\222$\323b\232"
      "4\306Z\242D\267R\252S\250J\262c\231B\272t\211:\302\203z2\312\223j*\322\243"
      "Z\"\332\263J\32\342\303;\22\352\324*\12\362\343\33\2\372\364\12\372\2\374"
      "\3\362\12\354\24\352\22\333$\342\32\3133\332\"\273C\322*\253T\3122\234c\302"
      ":\214s\272B{\203\262Jl\223\252R[\243\242ZK\263\232b<\303\222j+\323\212r\34"
      "\342\202z\14\361z\202\3\367r\212\24\352j\222$\332b\2324\313Z\242C\273R\252"
      "T\253J\262d\234B\272t\213:\302\204|2\312\224l*\322\243[\"\332\263L\32\342"
      "\303<\22\352\323+\12\362\343\34\2\372\364\13\372\2\374\4\362\12\353\23\352"
      "\22\333$\342\32\3134\332\"\273D\322*\253S\3122\234c\302:\214s\272B{\203\262"
      "Jl\223\252R\\\243\242ZK\262\232b<\303\222j,\322\212r\34\342\202z\14\361z"
      "\202\3\366r\212\24\352j\222$\332b\2324\313Z\242D\273R\252T\253J\262c\234"
      "B\272t\213:\302\203{2\312\223k*\322\243\\\"\332\263K\32\342\303;\22\352\323"
      ",\12\362\343\34\2\372\364\14\372\2\374\3\362\12\353\23\352\22\334#\342\32"
      "\3133\332\"\274B\322*\253R\3122\233b\302:\213r\272B|\201\262Jl\221\252R\\"
      "\241\242ZK\260\232b;\277\222j,\315\212r\34\333\202z\14\345z\202\3\346r\212"
      "\24\340j\222$\324b\2323\306Z\242D\267R\252T\250J\262c\231B\272t\211:\302"
      "\204z2\312\223j*\322\244Z\"\332\263J\32\342\303:\22\352\323+\12\362\343\33"
      "\2\372\364\12\372\2\374\2\362\12\353\20\352\22\333\40\342\32\3130\332\"\273"
      "@\322*\254O\3122\234_\302:\214n\272B{}\262Jl\214\252R[\233\242ZL\251\232"
      "b;\267\222j,\304\212r\34\316\202z\14\325z\202\3\327r\212\24\322j\222$\312"
      "b\2324\276Z\242D\260R\252T\242J\262c\223B\272s\205:\302\204v2\312\223f*\322"
      "\243V\"\332\263G\32\342\3038\22\352\323(\12\362\343\30\2\372\364\10\372\2"
      "\374\1\362\12\353\16\352\22\333\35\342\32\314,\332\"\273<\322*\254K\3122"
      "\234Z\302:\213i\272B|x\262Jk\206\252R\\\224\242ZK\241\232b;\256\222j,\270"
      "\212r\34\301\202z\14\306z\202\3\307r\212\24\304j\222$\274b\2324\262Z\242"
      "D\250R\252T\232J\262d\215B\272t\177:\302\203p2\312\223a*\322\244R\"\332\263"
      "D\32\342\3044\22\352\323%\12\362\343\25\2\372\364\5\372\2\374\0\362\12\353"
      "\11\352\22\333\30\342\32\313(\332\"\2747\322*\253F\3122\233T\302:\213b\272"
      "B{p\262Jl}\252R[\213\242ZL\227\232b<\242\222j,\253\212r\34\263\202z\14\266"
      "z\202\3\267r\212\24\264j\222#\257b\2323\247Z\242D\234R\252S\221J\262d\204"
      "B\272tw:\302\203i2\312\223\\*\322\244M\"\332\264>\32\342\304/\22\352\323"
      "\40\12\362\343\20\2\372\364\2\372\2\374\0\362\12\353\4\352\22\333\23\342"
      "\32\313\"\332\"\2730\322*\253?\3122\233M\302:\214[\272B|h\262Jkt\252R\\\200"
      "\242ZK\213\232b<\225\222j,\235\212r\34\243\202z\14\247z\202\3\247r\212\24"
      "\245j\222$\240b\2324\231Z\242D\220R\252T\205J\262c{B\272sn:\302\204a2\312"
      "\224S*\322\243F\"\332\2647\32\342\303)\22\352\323\33\12\362\343\14\2\372"
      "\364\0\372\2\374\0\362\12\354\0\352\22\334\15\342\32\313\33\332\"\274)\322"
      "*\2537\3122\234D\302:\213Q\272B|^\262Jlj\252R[u\242ZL\177\232b<\210\222j"
      "+\217\212r\34\224\202z\14\227z\202\3\227r\212\23\226j\222$\221b\2324\213"
      "Z\242D\203R\252TzJ\262coB\272td:\302\204X2\312\223K*\322\244>\"\332\2640"
      "\32\342\303\"\22\352\323\24\12\362\344\5\2\372\363\0\372\2\374\0\362\12\353"
      "\0\352\22\333\5\342\32\313\23\332\"\273\40\322*\254.\3122\233;\302:\214G"
      "\272B{S\262Jl]\252R\\h\242ZLq\232b<y\222j,\177\212r\34\204\202z\14\207z\202"
      "\3\207r\212\24\205j\222#\202b\2324|Z\242DuR\252TmJ\262ccB\272sX:\302\203"
      "M2\312\223A*\322\2434\"\332\263'\32\342\303\32\22\352\323\14\12\362\343\0"
      "\2\372\364\0",
};

static const TestImage affine1_image = {
    32, 16, 4,
    "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\14\5\7\6\31\14\15\20$\25"
        "\17\33-\40\16'5,\12""3;:\4>@I\6ICZ\24QEl$WE\2007ZC\225NZ@\254gV:\301\202"
        "N0\313\226@'\324\2511\35\336\274!\23\350\320\21\11\362\343\1\1\264\257\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\304\4\303\0\317"
        "\15\305\3\330\30\304\21\330#\270#\316-\2443\3056\221D\273@}T\261Jjb\247T"
        "Vp\235^C|\223h/\206\212q\33\216\200{\12\222v\205\12\223l\217\36\220b\231"
        "2\213X\243E\202O\254YwE\266mk;\300\200\\1\312\224M'\324\250=\35\336\273,"
        "\24\347\316\33\12\361\342\11\1\310\303\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0%\0%\0\366\5\365\0\355\16\341\10\343\30\315\32\331\"\272"
        ",\317,\246=\3056\222O\273@\177_\262Ikp\250SW\177\236]D\214\224g0\230\212"
        "q\35\241\200{\12\246w\204\11\247m\216\35\244c\2300\236Y\242D\223O\254X\206"
        "E\266kx<\277\177i2\311\222X(\323\246G\36\335\2726\24\347\315$\12\361\341"
        "\22\1\333\326\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\21\0\21\0"
        "\367\4\366\1\355\16\342\16\343\30\317!\332!\2743\320+\250F\3065\224W\274"
        "?\200i\262Imz\250SX\213\237\\E\233\225f2\251\213p\36\263\201z\13\272w\204"
        "\7\274m\216\34\270d\227/\257Z\241C\243P\253V\224F\265j\204<\277~t2\311\221"
        "c)\322\245Q\37\334\270>\25\346\314+\13\360\340\30\1\357\351\5\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\370\3\370\2\356\15\343\23\344"
        "\27\320&\332!\2749\320+\251L\3074\225_\275>\202q\263Hn\204\251R[\226\237"
        "\\G\247\225f3\267\214o\40\305\202y\14\316x\203\6\320n\215\32\312d\227.\277"
        "Z\241B\260P\253V\240G\264i\216=\276}|3\310\220j)\322\243W\37\334\267C\25"
        "\346\3131\14\357\336\36\2\371\363\11\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\370\3\371\3\357\14\345\25\345\26\321)\333\40\275=\321"
        "*\252P\3074\226d\275>\203w\264Go\212\252Q\\\235\240[H\260\226e4\302\214o"
        "!\323\202y\15\341x\203\5\345o\214\31\333e\226-\313[\240@\272Q\252S\250G\264"
        "g\225=\276{\2024\307\217o*\321\242[\40\333\266H\26\345\3114\14\357\335\40"
        "\2\371\362\14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\371"
        "\2\372\4\357\14\346\27\345\26\322+\333\40\276>\322)\253R\3103\230e\276=\204"
        "y\264Gp\215\252Q\\\240\240[I\264\227d5\310\215n\"\333\203x\16\356y\202\3"
        "\366o\214\30\345e\226,\322\\\237?\277R\251S\253H\263f\230>\275z\2044\307"
        "\215p*\321\241]!\332\264I\27\344\3105\15\356\334\"\3\370\360\16\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\365\1\367\3\360\13\347\26"
        "\346\25\323*\334\37\300>\322)\254Q\3103\231e\277<\205x\265Fr\214\253P^\237"
        "\241ZJ\262\227d7\306\215n#\330\204w\20\350z\201\3\356p\213\27\341f\225*\317"
        "\\\237>\275R\251R\252I\262e\227?\274y\2035\306\214p+\320\240\\!\332\263H"
        "\27\344\3075\16\355\332!\4\367\357\15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\342\1\344\2\360\13\350\25\347\24\325(\335\36\302;\323"
        "(\256O\3112\232b\277<\206u\265Fs\207\254O_\232\242YK\254\230c7\275\216m%"
        "\314\204w\21\327z\201\3\332q\212\25\323g\224)\306]\236=\265S\250P\244I\262"
        "c\221?\274w\1776\305\213l,\317\236X\"\331\262F\30\343\3062\16\355\331\37"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\316\1\320"
        "\1\361\12\352\20\347\24\326$\335\36\3027\324'\257I\3121\234\\\300;\210n\266"
        "Et\200\254O`\221\242YM\241\231b9\261\217l&\274\205v\22\304{\200\4\306q\212"
        "\24\301g\224(\266]\236;\251T\247O\232J\261c\211@\273vx6\305\211f,\317\236"
        "S\"\331\261A\31\342\305.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\272\1\274\0\362\11\353\13\350\23\327\35\336\35\304"
        "0\324'\260B\3121\234T\300;\211e\267Duu\255Nb\205\243XN\224\231b;\241\217"
        "l'\252\205v\23\260|\177\5\261r\211\23\256h\223&\246^\235:\233T\247N\215J"
        "\261a~A\272un7\304\211]-\316\234K#\330\2609\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\247\1\250\0\362\11\354"
        "\5\350\23\330\26\337\34\305(\325&\2619\3130\235J\301:\213[\267Dwj\255Ncw"
        "\244WO\204\232a<\220\220k(\227\206u\25\234|\177\6\235r\211\21\233i\222%\224"
        "_\2349\212U\246M~K\260`qA\272tb7\304\207S.\315\233B\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\223\1"
        "\224\0\363\10\356\0\351\22\333\15\337\34\306\36\325&\263.\314/\237>\3029"
        "\213M\270Cx[\256Mdh\244WQs\232a=}\221j)\204\207t\26\210}~\6\211s\210\20\206"
        "f\216\"~U\2132mF\207=\\8\201EJ+yK:\40pM+\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0p\0p\0\302"
        "\6\277\0\250\14\235\3\217\21\200\15x\25e\25b\26M\32N\27""9\34<\25'\33+\22"
        "\31\27\33\16\15\22\15\10\5\12\1\1\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
};

static const TestImage affine2_image = {
    32, 16, 4,
    "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\37\5\33\4\263\31\234\27\337\34\306"
        "\33\342\31\314\32\345\26\322\31\350\23\330\27\353\20\336\25\356\15\344\23"
        "\361\12\352\17\364\7\361\13\370\3\367\6\331\1\332\2y\0z\1\32\0\32\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\36\6\27\7\252\"\211%\324"
        "'\257-\327$\266.\332!\274.\335\36\302-\340\33\310+\343\30\316(\346\25\323"
        "%\351\22\332!\354\17\340\35\357\14\346\30\362\11\355\22\365\6\363\14\370"
        "\3\371\5\301\1\302\2b\0b\0\2\0\2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\34\10\24\12\240"
        ",w5\3103\230A\3130\236B\316-\244B\321*\253B\324'\261@\330#\267>\333\40\275"
        ";\336\35\3038\341\32\3114\344\27\317.\347\24\325)\352\21\333#\355\16\341"
        "\34\360\13\347\25\363\10\356\15\366\5\364\7\371\2\372\1\251\1\252\0J\0J\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\32\12\21\14\2275dC\275>\201S\300;\210U\3038\216V\3065\224V\3112\233T\314"
        "/\241S\317,\246Q\322)\254N\325&\262J\330#\270E\333\40\276?\336\35\304:\341"
        "\32\3123\344\27\321,\350\23\327$\353\20\335\34\356\15\343\24\361\12\351\13"
        "\364\7\357\4\367\4\366\1\360\1\362\0\221\1\222\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\31\13\16\16\216>RO\261Jkc\264Gqf\270Cwh\273@}i\276"
        "=\203i\301:\211i\3047\217g\3074\225d\3121\234`\315.\242[\320+\247V\323(\255"
        "P\326%\264I\331\"\272B\334\37\300;\337\34\3062\342\31\315*\345\26\322!\350"
        "\23\330\27\353\20\336\16\356\15\345\5\361\12\353\0\321\6\315\0.\0.\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\27\15\12\20\204H?Z\246UTr\251RZw\254O`z\257"
        "Lf|\262Im}\265Fs}\270Cy|\273@\177z\276=\205w\301:\213r\3047\221m\3103\230"
        "f\3130\235`\316-\243Y\321*\252Q\324'\260H\327$\265@\332!\2747\335\36\301"
        "-\340\33\307#\343\30\316\31\346\25\324\17\307\17\272\4,\2)\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\25\17\7\22{Q-c\233`>~\236]D\204\241ZJ\211\244WO\215"
        "\247TU\217\252Q\\\221\255Nb\221\260Kg\217\263Hn\215\266Et\211\271Bz\203\274"
        "?\200}\277<\206w\3029\214p\3056\223g\3103\231^\3130\237U\316-\244L\321*\252"
        "B\324'\2608\330#\267-\333\40\275\"\275\31\246\25*\5%\3\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\24\20\3\23rZ\32j\217l&\210\222i,\220\225f2\226\230c8\234\233"
        "`>\241\236]E\243\241ZK\245\244WQ\245\250SW\243\253P]\237\256Mc\232\261Jj"
        "\224\264Gp\215\267Dv\205\272A{}\275>\202t\300;\207j\3038\215`\3065\224V\311"
        "2\232L\314/\240A\317,\2466\263#\223&'\7!\7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\204w\20\215\207t\26\227\212q\34\237\215n\"\247\220k(\256"
        "\223h.\263\226e4\267\231b:\270\234_@\270\237\\F\265\242YL\261\245VR\253\250"
        "SY\244\253P_\234\256Me\222\261Jk\211\264Gq\177\270Cwt\273@}j\276=\204_\301"
        ":\211T\3047\217H\252-\1775%\11\35\12\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0~}\10\243\201z\13\255\204w\21\266\210s\30\277"
        "\213p\36\305\216m$\312\221j*\314\224g/\313\227d6\310\232a<\302\235^A\272"
        "\240[G\261\243XN\247\246UT\235\251RZ\223\254O`\210\257Lf|\262Ilq\265Fsf\270"
        "CyZ\2406lD#\13\30\16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0y\202\4\271|\177\5\303\177|\11\315\202y\15\326"
        "\205v\23\335\210s\31\340\213p\37\336\216m%\330\221j+\317\224g1\306\230c7"
        "\273\233`=\260\236]C\245\241ZJ\232\244WO\216\247TV\202\252Q[v\255Nbj\226"
        "@YQ!\15\24\21\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0t\207\17\313w\204\10\327z\201\3\343}"
        "~\6\355\200{\12\362\203x\16\356\206u\24\344\211r\33\331\214o!\314\217l'\301"
        "\222i-\265\225f3\251\230c9\235\233`?\220\236]E\204\241ZKx\214JE]\37\17\20"
        "\23\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0n\215\32\330q\212\24\344t\207\15"
        "\356x\203\7\363{\200\4\355~}\7\343\201z\13\330\204w\20\314\207t\26\300\212"
        "q\34\265\215n\"\250\220k(\234\223h.\220\226e4\203\203T2g\35\21\14\26\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0i\222$\331l\217\36\337"
        "o\214\30\341r\211\22\336u\206\14\327x\203\5\316{\200\5\304~}\10\271\201z"
        "\13\256\204w\21\243\210s\30\227\213p\36\213y]\36n\33\23\7\27\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0d\227/\314g\224"
        ")\315j\221#\314m\216\35\306p\213\27\300s\210\20\267v\205\12\256y\202\3\244"
        "|\177\5\231\177|\11\217og\13r\30\26\3\30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0^\235:\271a\2324"
        "\270d\227-\263h\223'\257k\220!\250n\215\33\240q\212\24\230t\207\16\216eq"
        "\7r\26\30\0\31\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
        "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
};

template<typename T>
std::vector<T> ImageInit(const TestImage &image) {
  std::vector<T> vimage(4 * image.height * image.width);
  for (int c = 0, i = 0; c < 4; ++c) {
    for (int y = 0; y < image.height; ++y) {
      for (int x = 0; x < image.width; ++x, ++i) {
        vimage[i] = image.pixel_data[y * image.width * 4 +
                                     x * 4 + c];
      }
    }
  }
  return vimage;
}

template<typename T>
void OriginalTensor(const int N, const int C, std::vector<T> *output) {
  CHECK_NOTNULL(output);
  output->resize(N * C * 16 * 32);
  for (size_t s = 0; s < output->size();) {
    const size_t n = std::min(OriginalImage<T>().size(), output->size() - s);
    std::memcpy(output->data() + s, OriginalImage<T>().data(), sizeof(T) * n);
    s += n;
  }
}

template<typename T>
void ExpectedGenericTensor(
    const int N, const int C, std::vector<T> *expected) {
  CHECK_NOTNULL(expected);
  CHECK_GE(N, 1);
  CHECK_LE(N, 2);
  CHECK_GE(C, 1);
  CHECK_LE(C, 4);
  expected->resize(N * C * 16 * 32);
  std::memcpy(expected->data(), Affine1Image<T>().data(),
              sizeof(T) * C * 16 * 32);
  if (N == 2) {
    for (int c = 0; c < C; ++c) {
      std::memcpy(expected->data() + C * 16 * 32 + c * 16 * 32,
                  Affine2Image<T>().data() + ((c + C) % 4) * 16 * 32,
                  sizeof(T) * 16 * 32);
    }
  }
}

template<typename T>
const std::vector<T> &OriginalImage() {
  static const std::vector<T> vimage(ImageInit<T>(original_image));
  return vimage;
}

template<typename T>
const std::vector<T> &Affine1Image() {
  static const std::vector<T> vimage(ImageInit<T>(affine1_image));
  return vimage;
}

template<typename T>
const std::vector<T> &Affine2Image() {
  static const std::vector<T> vimage(ImageInit<T>(affine2_image));
  return vimage;
}

template void OriginalTensor<int8_t>(
    const int, const int, std::vector<int8_t> *);

template void OriginalTensor<int16_t>(
    const int, const int, std::vector<int16_t> *);

template void OriginalTensor<int32_t>(
    const int, const int, std::vector<int32_t> *);

template void OriginalTensor<int64_t>(
    const int, const int, std::vector<int64_t> *);

template void OriginalTensor<uint8_t>(
    const int, const int, std::vector<uint8_t> *);

template void OriginalTensor<uint16_t>(
    const int, const int, std::vector<uint16_t> *);

template void OriginalTensor<uint32_t>(
    const int, const int, std::vector<uint32_t> *);

template void OriginalTensor<uint64_t>(
    const int, const int, std::vector<uint64_t> *);

template void OriginalTensor<float>(
    const int, const int, std::vector<float> *);

template void OriginalTensor<double>(
    const int, const int, std::vector<double> *);

template void ExpectedGenericTensor<int8_t>(
    const int, const int, std::vector<int8_t> *);

template void ExpectedGenericTensor<int16_t>(
    const int, const int, std::vector<int16_t> *);

template void ExpectedGenericTensor<int32_t>(
    const int, const int, std::vector<int32_t> *);

template void ExpectedGenericTensor<int64_t>(
    const int, const int, std::vector<int64_t> *);

template void ExpectedGenericTensor<uint8_t>(
    const int, const int, std::vector<uint8_t> *);

template void ExpectedGenericTensor<uint16_t>(
    const int, const int, std::vector<uint16_t> *);

template void ExpectedGenericTensor<uint32_t>(
    const int, const int, std::vector<uint32_t> *);

template void ExpectedGenericTensor<uint64_t>(
    const int, const int, std::vector<uint64_t> *);

template void ExpectedGenericTensor<float>(
    const int, const int, std::vector<float> *);

template void ExpectedGenericTensor<double>(
    const int, const int, std::vector<double> *);

template std::vector<int8_t> ImageInit<int8_t>(const TestImage &);

template std::vector<int16_t> ImageInit<int16_t>(const TestImage &);

template std::vector<int32_t> ImageInit<int32_t>(const TestImage &);

template std::vector<int64_t> ImageInit<int64_t>(const TestImage &);

template std::vector<uint8_t> ImageInit<uint8_t>(const TestImage &);

template std::vector<uint16_t> ImageInit<uint16_t>(const TestImage &);

template std::vector<uint32_t> ImageInit<uint32_t>(const TestImage &);

template std::vector<uint64_t> ImageInit<uint64_t>(const TestImage &);

template std::vector<float> ImageInit<float>(const TestImage &);

template std::vector<double> ImageInit<double>(const TestImage &);

template const std::vector<int8_t> &OriginalImage<int8_t>();

template const std::vector<int16_t> &OriginalImage<int16_t>();

template const std::vector<int32_t> &OriginalImage<int32_t>();

template const std::vector<int64_t> &OriginalImage<int64_t>();

template const std::vector<uint8_t> &OriginalImage<uint8_t>();

template const std::vector<uint16_t> &OriginalImage<uint16_t>();

template const std::vector<uint32_t> &OriginalImage<uint32_t>();

template const std::vector<uint64_t> &OriginalImage<uint64_t>();

template const std::vector<float> &OriginalImage<float>();

template const std::vector<double> &OriginalImage<double>();

template const std::vector<int8_t> &Affine1Image<int8_t>();

template const std::vector<int16_t> &Affine1Image<int16_t>();

template const std::vector<int32_t> &Affine1Image<int32_t>();

template const std::vector<int64_t> &Affine1Image<int64_t>();

template const std::vector<uint8_t> &Affine1Image<uint8_t>();

template const std::vector<uint16_t> &Affine1Image<uint16_t>();

template const std::vector<uint32_t> &Affine1Image<uint32_t>();

template const std::vector<uint64_t> &Affine1Image<uint64_t>();

template const std::vector<float> &Affine1Image<float>();

template const std::vector<double> &Affine1Image<double>();

template const std::vector<int8_t> &Affine2Image<int8_t>();

template const std::vector<int16_t> &Affine2Image<int16_t>();

template const std::vector<int32_t> &Affine2Image<int32_t>();

template const std::vector<int64_t> &Affine2Image<int64_t>();

template const std::vector<uint8_t> &Affine2Image<uint8_t>();

template const std::vector<uint16_t> &Affine2Image<uint16_t>();

template const std::vector<uint32_t> &Affine2Image<uint32_t>();

template const std::vector<uint64_t> &Affine2Image<uint64_t>();

template const std::vector<float> &Affine2Image<float>();

template const std::vector<double> &Affine2Image<double>();

}  // namespace cpu
}  // namespace testing
}  // namespace imgdistort
